{"version":3,"sources":["components/dashboard/Dashboard.js","services/auth-provider.js","utils/data/admin-data.js","utils/endpoints/admin-endpoints.js","utils/data/application-data.js","utils/endpoints/index.js","utils/endpoints/settings-endpoints.js","utils/endpoints/application-endpoints.js","utils/pagination.js","services/data-provider.js","services/index.js","components/msadmins/AdminList.js","components/msadmins/AdminEdit.js","components/msadmins/AdminCreate.js","components/msadmins/AdminShow.js","components/msadmins/index.js","components/applications/ApplicationList.js","components/applications/ApplicationShow.js","components/applications/index.js","components/settings/SettingShow.js","components/settings/index.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","Card","CardHeader","title","CardContent","login","a","username","password","request","Request","method","body","JSON","stringify","email","headers","fetch","then","res","status","Error","statusText","json","data","localStorage","setItem","systemToken","logout","removeItem","Promise","resolve","checkError","error","reject","checkAuth","getItem","getPermissions","records","Array","isArray","map","item","id","msAdminId","apiUrl","convertData","organizationId","applicationId","orgId","_id","type","resource","params","GET_LIST","url","getData","GET_ONE","GET_MANY","GET_MANY_REFERENCE","UPDATE","options","CREATE","DELETE","adminEndpoints","settingsEndpoints","DELETE_MANY","urls","ids","applicationEndpoints","pagination","page","perPage","limit","sort","order","httpClient","Headers","Accept","set","fetchUtils","fetchJson","authProvider","dataProvider","getList","query","getPaginateQuery","endpoint","endpoints","total","pageInfo","totalRecord","getOne","getMany","getManyReference","update","token","updateMany","create","delete","deleteMany","result","all","push","AdminList","props","isSmall","useMediaQuery","theme","breakpoints","down","List","label","SimpleList","primaryText","record","fullname","secondaryText","tertiaryText","role","Datagrid","rowClick","isRowSelectable","TextField","source","EmailField","AdminEdit","Edit","SimpleForm","TextInput","disabled","AdminCreate","parse","location","search","console","log","Create","redirect","validate","required","PasswordInput","AdminShow","Show","SimpleShowLayout","list","edit","show","icon","UserIcon","ApplicationPagination","Pagination","rowsPerPageOptions","ApplicationList","applicationName","organizationName","ReferenceField","reference","ApplicationShow","AppsIcon","SettingShow","SettingIcon","App","Admin","dashboard","services","Resource","name","msadmins","applications","settings","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c15bc50e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, CardHeader } from \"@material-ui/core\";\r\n\r\nconst Dashboard = () => (\r\n  <Card>\r\n    <CardHeader title=\"Welcome to Admin Dashboard\" />\r\n    <CardContent>This is the dashboard area</CardContent>\r\n  </Card>\r\n);\r\n\r\nexport default Dashboard;\r\n","const loginUrl =\r\n  \"https://comments-microservice.herokuapp.com/v1/msadmins/login\";\r\n\r\nexport default {\r\n  login: async ({ username, password }) => {\r\n    const request = new Request(loginUrl, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ email: username, password }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    return fetch(request)\r\n      .then((res) => {\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error(res.statusText);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(({ data }) => {\r\n        localStorage.setItem(\"systemToken\", data.systemToken);\r\n      });\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem(\"systemToken\");\r\n    return Promise.resolve();\r\n  },\r\n  checkError: (error) => {\r\n    if (error && (error.status === 401 || error.status === 403)) {\r\n      localStorage.removeItem(\"systemToken\");\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  },\r\n  checkAuth: () => {\r\n    return localStorage.getItem(\"systemToken\")\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  },\r\n  getPermissions: () => Promise.resolve(),\r\n};\r\n","export default (data) => {\r\n  if (data.records && Array.isArray(data.records)) {\r\n    return data.records.map((item) => ({ id: item.msAdminId, ...item }));\r\n  } else if (data.msAdminId) {\r\n    return { id: data.msAdminId, ...data };\r\n  }\r\n  return data;\r\n};\r\n","import getData from \"../../utils/data/admin-data\";\r\nimport {\r\n  GET_LIST,\r\n  GET_ONE,\r\n  CREATE,\r\n  UPDATE,\r\n  DELETE,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n} from \"react-admin\";\r\n\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_LIST:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        getData: getData,\r\n      };\r\n    case GET_ONE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/${params.id}`,\r\n        getData: getData,\r\n      };\r\n    case GET_MANY:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        getData: getData,\r\n      };\r\n    case GET_MANY_REFERENCE:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        getData: getData,\r\n      };\r\n    case UPDATE:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        options: {\r\n          method: \"PATCH\",\r\n          body: JSON.stringify(params.data),\r\n        },\r\n        getData: getData,\r\n      };\r\n    case CREATE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/create`,\r\n        options: {\r\n          method: \"POST\",\r\n          body: JSON.stringify(params.data),\r\n        },\r\n        getData: getData,\r\n      };\r\n    case DELETE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/${params.id}`,\r\n        options: { method: \"DELETE\" },\r\n        getData: getData,\r\n      };\r\n    default:\r\n      throw new Error(`Unsupported Admin Data Provider request type ${type}`);\r\n  }\r\n};\r\n","const convertData = (data) => {\r\n  if (data.organizationId) {\r\n    return {\r\n      id: data.applicationId,\r\n      orgId: data.organizationId._id,\r\n      ...data,\r\n    };\r\n  }\r\n  return {\r\n    id: data.applicationId,\r\n    ...data,\r\n  };\r\n};\r\n\r\nexport default (data) => {\r\n  if (data.records && Array.isArray(data.records)) {\r\n    return data.records.map((item) => convertData(item));\r\n  } else if (data.applicationId) {\r\n    return convertData(data);\r\n  }\r\n  return data;\r\n};\r\n","import adminEndpoints from \"./admin-endpoints\";\r\nimport settingsEndpoints from \"./settings-endpoints\";\r\nimport applicationEndpoints from \"./application-endpoints\";\r\n\r\nexport default (type, resource, params) => {\r\n  switch (resource) {\r\n    case \"Admins\":\r\n      return adminEndpoints(type, params);\r\n    case \"Settings\":\r\n      return settingsEndpoints(type, params);\r\n    case \"Applications\":\r\n      return applicationEndpoints(type, params);\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n","import { GET_ONE, UPDATE } from \"react-admin\";\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_ONE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/settings`,\r\n        getData: (data) => data,\r\n      };\r\n    case UPDATE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/settings`,\r\n        options: {\r\n          method: \"PATCH\",\r\n          body: JSON.stringify(params.data),\r\n        },\r\n        getData: (data) => data,\r\n      };\r\n    default:\r\n      throw new Error(`Unsupported Admin Data Provider request type ${type}`);\r\n  }\r\n};\r\n","import getData from \"../../utils/data/application-data\";\r\nimport {\r\n  GET_ONE,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n} from \"react-admin\";\r\n\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_MANY:\r\n    case GET_MANY_REFERENCE:\r\n    case GET_LIST:\r\n      return {\r\n        url: `${apiUrl}/msadmins/applications`,\r\n        getData: getData,\r\n      };\r\n    case GET_ONE:\r\n    case DELETE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/applications/${params.id}`,\r\n        getData: getData,\r\n      };\r\n    case DELETE_MANY:\r\n      return {\r\n        urls: params.ids.map((id) => `${apiUrl}/msadmins/applications/${id}`),\r\n        getData: getData,\r\n      };\r\n    default:\r\n      throw new Error(\r\n        `Unsupported Application Data Provider request type ${type}`\r\n      );\r\n  }\r\n};\r\n","export default (params) => {\r\n  const { page, perPage } =\r\n    params && params.pagination ? params.pagination : { page: 1, perPage: 10 };\r\n  const { order } = params && params.sort ? params.sort : { order: \"DESC\" };\r\n  return {\r\n    limit: perPage,\r\n    sort: order,\r\n    page: page,\r\n  };\r\n};\r\n","import { fetchUtils } from \"react-admin\";\r\nimport endpoints from \"../utils/endpoints\";\r\nimport { stringify } from \"querystring\";\r\nimport getPaginateQuery from \"../utils/pagination\";\r\nimport {\r\n  GET_LIST,\r\n  GET_ONE,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  CREATE,\r\n  UPDATE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n} from \"react-admin\";\r\n\r\nconst httpClient = (url, options = {}) => {\r\n  if (!options.headers) {\r\n    options.headers = new Headers({ Accept: \"application/json\" });\r\n  }\r\n  const systemToken = localStorage.getItem(\"systemToken\");\r\n  options.headers.set(\"Authorization\", `Bearer ${systemToken}`);\r\n  return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nexport default {\r\n  getList: (resource, params) => {\r\n    const query = getPaginateQuery(params);\r\n    const endpoint = endpoints(GET_LIST, resource, params);\r\n    return httpClient(`${endpoint.url}?${stringify(query)}`).then(\r\n      ({ json }) => ({\r\n        data: endpoint.getData(json.data),\r\n        total: json.data.pageInfo.totalRecord,\r\n      })\r\n    );\r\n  },\r\n\r\n  getOne: (resource, params) => {\r\n    const endpoint = endpoints(GET_ONE, resource, params);\r\n    return httpClient(endpoint.url).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  getMany: (resource, params) => {\r\n    const endpoint = endpoints(GET_MANY, resource, params);\r\n    return httpClient(endpoint.url).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  getManyReference: (resource, params) => {\r\n    const query = getPaginateQuery(params);\r\n    const endpoint = endpoints(GET_MANY_REFERENCE, resource, params);\r\n    return httpClient(`${endpoint.url}?${stringify(query)}`).then(\r\n      ({ json }) => ({\r\n        data: endpoint.getData(json.data),\r\n        total: json.data.pageInfo.totalRecord,\r\n      })\r\n    );\r\n  },\r\n\r\n  update: (resource, params) => {\r\n    const token = localStorage.getItem(\"systemToken\");\r\n    const endpoint = endpoints(UPDATE, resource, params);\r\n    if (token === params.id || token === params.msAdminId) {\r\n      return httpClient(endpoint.url, endpoint.options).then(({ json }) => ({\r\n        data: endpoint.getData(json.data),\r\n      }));\r\n    }\r\n    return Promise.reject();\r\n  },\r\n\r\n  updateMany: (resource, params) => Promise.reject(),\r\n\r\n  create: (resource, params) => {\r\n    const endpoint = endpoints(CREATE, resource, params);\r\n    return httpClient(endpoint.url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(params.data),\r\n    }).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  delete: (resource, params) => {\r\n    const endpoint = endpoints(DELETE, resource, params);\r\n    httpClient(endpoint.url, {\r\n      method: \"DELETE\",\r\n    }).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  deleteMany: (resource, params) => {\r\n    const endpoint = endpoints(DELETE_MANY, resource, params);\r\n    let result = [];\r\n    return Promise.all(\r\n      endpoint.urls.map((url) =>\r\n        httpClient(url, {\r\n          method: \"DELETE\",\r\n        }).then(({ json }) => result.push(endpoint.getData(json.data)))\r\n      )\r\n    ).then(() => ({ data: result }));\r\n  },\r\n};\r\n","import authProvider from \"./auth-provider\";\r\nimport dataProvider from \"./data-provider\";\r\n\r\nexport default {\r\n  authProvider: authProvider,\r\n  dataProvider: dataProvider,\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { List, Datagrid, TextField, EmailField, SimpleList } from \"react-admin\";\r\n\r\nconst AdminList = (props) => {\r\n  const isSmall = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <List label=\"Admins\" title=\"Admins\" {...props}>\r\n      {isSmall ? (\r\n        <SimpleList\r\n          primaryText={(record) => record.fullname}\r\n          secondaryText={(record) => record.email}\r\n          tertiaryText={(record) => record.role}\r\n        />\r\n      ) : (\r\n        <Datagrid rowClick=\"show\" isRowSelectable={(record) => false}>\r\n          <TextField source=\"id\" />\r\n          <TextField source=\"fullname\" />\r\n          <EmailField source=\"email\" />\r\n          <TextField source=\"role\" />\r\n        </Datagrid>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default AdminList;\r\n","import React from \"react\";\r\nimport { Edit, SimpleForm, TextInput } from \"react-admin\";\r\n\r\nconst AdminEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled source=\"id\" />\r\n      <TextInput label=\"Full Name\" source=\"fullname\" />\r\n      <TextInput disabled source=\"email\" />\r\n      <TextInput disabled source=\"role\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport default AdminEdit;\r\n","import React from \"react\";\r\nimport {\r\n  Create,\r\n  SimpleForm,\r\n  TextInput,\r\n  PasswordInput,\r\n  required,\r\n} from \"react-admin\";\r\nimport { parse } from \"querystring\";\r\n\r\nconst AdminCreate = (props) => {\r\n  const data = parse(props.location.search);\r\n  console.log(\"AdminCreate\", data);\r\n  return (\r\n    <Create label=\"Create\" title=\"Create an Admin\" {...props}>\r\n      <SimpleForm redirect=\"show\">\r\n        <TextInput\r\n          label=\"Full Name\"\r\n          source=\"fullname\"\r\n          validate={[required()]}\r\n        />\r\n        <TextInput source=\"email\" validate={[required()]} />\r\n        <PasswordInput source=\"password\" validate={[required()]} />\r\n      </SimpleForm>\r\n    </Create>\r\n  );\r\n};\r\n\r\nexport default AdminCreate;\r\n","import React from \"react\";\r\nimport { Show, SimpleShowLayout, TextField } from \"react-admin\";\r\n\r\nconst AdminShow = (props) => (\r\n  <Show label=\"Show\" title=\"\" {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField label=\"Full Name\" source=\"fullname\" />\r\n      <TextField source=\"email\" />\r\n      <TextField source=\"password\" />\r\n      <TextField source=\"role\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n\r\nexport default AdminShow;\r\n","import AdminList from \"./AdminList\";\r\nimport AdminEdit from \"./AdminEdit\";\r\nimport AdminCreate from \"./AdminCreate\";\r\nimport AdminShow from \"./AdminShow\";\r\nimport UserIcon from \"@material-ui/icons/Group\";\r\n\r\nexport default {\r\n  list: AdminList,\r\n  edit: AdminEdit,\r\n  create: AdminCreate,\r\n  show: AdminShow,\r\n  icon: UserIcon,\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  SimpleList,\r\n  Pagination,\r\n  ReferenceField,\r\n} from \"react-admin\";\r\n\r\nconst ApplicationPagination = (props) => (\r\n  <Pagination rowsPerPageOptions={[10, 25, 50]} {...props} />\r\n);\r\n\r\nconst ApplicationList = (props) => {\r\n  const isSmall = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <List\r\n      label=\"Applications\"\r\n      title=\"Applications\"\r\n      pagination={<ApplicationPagination />}\r\n      {...props}\r\n    >\r\n      {isSmall ? (\r\n        <SimpleList\r\n          primaryText={(record) => record.applicationName}\r\n          secondaryText={(record) => record.orgId}\r\n          tertiaryText={(record) => record.organizationName}\r\n        />\r\n      ) : (\r\n        <Datagrid rowClick=\"show\">\r\n          <TextField source=\"id\" />\r\n          <TextField label=\"Name\" source=\"applicationName\" />\r\n          <ReferenceField\r\n            label=\"Organization\"\r\n            source=\"orgId\"\r\n            reference=\"Organizations\"\r\n          >\r\n            <TextField source=\"organizationName\" />\r\n          </ReferenceField>\r\n        </Datagrid>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ApplicationList;\r\n","import React from \"react\";\r\nimport { Show, SimpleShowLayout, TextField } from \"react-admin\";\r\n\r\nconst ApplicationShow = (props) => (\r\n  <Show label=\"Show\" title=\"\" {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField source=\"id\" />\r\n      <TextField label=\"Name\" source=\"applicationName\" />\r\n      <TextField label=\"Organization ID\" source=\"orgId\" />\r\n      <TextField label=\"Organization Name\" source=\"organizationName\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n\r\nexport default ApplicationShow;\r\n","import ApplicationList from \"./ApplicationList\";\r\nimport ApplicationShow from \"./ApplicationShow\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\n\r\nexport default {\r\n  list: ApplicationList,\r\n  show: ApplicationShow,\r\n  icon: AppsIcon,\r\n};\r\n","import React from \"react\";\r\nimport { Show, SimpleShowLayout, TextField } from \"react-admin\";\r\n\r\nconst SettingShow = (props) => (\r\n  <Show label=\"Settings\" title=\"Settings\" {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField label=\"Requests per Minute (max)\" source=\"maxRequestsPerMin\" />\r\n      <TextField label=\"Items per Page (default)\" source=\"maxItemsPerPage\" />\r\n      <TextField label=\"Items per Page (max)\" source=\"defaultItemsPerPage\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n\r\nexport default SettingShow;\r\n","import SettingShow from \"./SettingShow\";\r\nimport SettingIcon from \"@material-ui/icons/Settings\";\r\n\r\nexport default {\r\n  list: SettingShow,\r\n  show: SettingShow,\r\n  icon: SettingIcon,\r\n};\r\n","import React from \"react\";\r\nimport { Admin, Resource } from \"react-admin\";\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport services from \"./services\";\r\nimport msadmins from \"./components/msadmins\";\r\nimport applications from \"./components/applications\";\r\nimport settings from \"./components/settings\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Admin dashboard={Dashboard} {...services}>\r\n      <Resource name=\"Admins\" {...msadmins} />\r\n      <Resource name=\"Applications\" {...applications} />\r\n      <Resource name=\"Settings\" {...settings} />\r\n    </Admin>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}