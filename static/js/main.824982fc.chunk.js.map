{"version":3,"sources":["components/dashboard/Admins.js","hooks/useAdminProvider/index.js","components/dashboard/Applications.js","hooks/useApplicationProvider/index.js","components/dashboard/Organizations.js","hooks/useOrganizationProvider/index.js","components/dashboard/Dashboard.js","services/auth-provider.js","utils/data/admin-data.js","utils/endpoints/admin-endpoints.js","utils/data/organizations-data.js","utils/data/application-data.js","utils/endpoints/application-endpoints.js","utils/endpoints/index.js","utils/endpoints/settings-endpoints.js","utils/endpoints/organizations-endpoints.js","services/data-provider.js","services/index.js","utils/pagination.js","components/msadmins/AdminList.js","components/msadmins/AdminEdit.js","components/msadmins/AdminCreate.js","components/msadmins/AdminShow.js","components/msadmins/index.js","components/organizations/OrganizationList.js","components/organizations/OrganizationShow.js","components/organizations/index.js","components/applications/ApplicationList.js","components/applications/ApplicationShow.js","components/applications/index.js","components/settings/SettingShow.js","components/settings/index.js","App.js","serviceWorker.js","index.js"],"names":["Admins","props","useState","adminCount","setAdminCount","dataProvider","useDataProvider","useEffect","a","getList","total","fetchAdminList","useAdminProvider","Card","to","Box","textAlign","Typography","color","variant","component","Applications","applicationCount","setApplicationCount","fetchAppList","useApplicationProvider","Organizations","organizationCount","setOrganizationCount","fetchOrgList","useOrganizationProvider","Dashboard","CardHeader","title","login","username","password","request","Request","method","body","JSON","stringify","email","headers","fetch","then","res","status","Error","statusText","json","data","localStorage","setItem","systemToken","logout","removeItem","Promise","resolve","checkError","error","reject","checkAuth","getItem","getPermissions","records","Array","isArray","map","item","id","msAdminId","apiUrl","mapOrganizationIdToId","organization","organizationId","getOrganizationsData","target","mappedData","filter","mapApplicationIdToId","application","applicationId","orgId","_id","getApplicationsData","type","resource","params","GET_LIST","url","getData","GET_ONE","GET_MANY","GET_MANY_REFERENCE","UPDATE","options","CREATE","DELETE","adminEndpoints","settingsEndpoints","organizationsEndpoints","DELETE_MANY","urls","ids","applicationEndpoints","httpClient","Headers","Accept","set","fetchUtils","fetchJson","authProvider","query","pagination","page","perPage","limit","sort","order","getPaginateQuery","endpoint","endpoints","pageInfo","totalRecord","getOne","getMany","getManyReference","targetId","update","token","updateMany","create","delete","deleteMany","result","all","push","AdminList","isSmall","useMediaQuery","theme","breakpoints","down","List","label","SimpleList","linkType","primaryText","record","fullname","secondaryText","tertiaryText","role","Datagrid","rowClick","isRowSelectable","TextField","source","EmailField","CustomToolbar","Toolbar","SaveButton","AdminEdit","Edit","SimpleForm","toolbar","TextInput","disabled","AdminCreate","parse","location","search","console","log","Create","redirect","validate","required","PasswordInput","AdminShowActions","basePath","TopToolbar","EditButton","DeleteButton","AdminShow","Show","actions","SimpleShowLayout","list","edit","show","icon","UserIcon","OrganizationPagination","Pagination","rowsPerPageOptions","OrganizationList","organizationName","useStyles","makeStyles","root","OrganizationShowActions","OrganizationShow","classes","TabbedShowLayout","Tab","ReferenceManyField","link","reference","className","applicationName","OrganizationIcon","ApplicationPagination","ApplicationList","ReferenceField","ApplicationShowActions","ApplicationShow","AppsIcon","SettingShow","SettingIcon","App","Admin","dashboard","services","Resource","name","msadmins","organizations","applications","settings","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.824982fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Box, Card, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useAdminProvider from \"../../hooks/useAdminProvider\";\r\n\r\nconst Admins = (props) => {\r\n  const [adminCount] = useAdminProvider();\r\n  return (\r\n    <Card>\r\n      <Link to=\"/Admins\">\r\n        <Box textAlign=\"right\">\r\n          <Typography color=\"textSecondary\">Admins</Typography>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {adminCount}\r\n          </Typography>\r\n        </Box>\r\n      </Link>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Admins;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useDataProvider } from \"react-admin\";\r\n\r\nexport default () => {\r\n  const [adminCount, setAdminCount] = useState(0);\r\n  const dataProvider = useDataProvider();\r\n\r\n  useEffect(() => {\r\n    const fetchAdminList = async () => {\r\n      const { total } = await dataProvider.getList(\"Admins\");\r\n      setAdminCount(total);\r\n    };\r\n    fetchAdminList();\r\n  }, [adminCount, dataProvider]);\r\n\r\n  return [adminCount];\r\n};\r\n","import React from \"react\";\r\nimport { Box, Card, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useApplicationProvider from \"../../hooks/useApplicationProvider\";\r\n\r\nconst Applications = (props) => {\r\n  const [applicationCount] = useApplicationProvider();\r\n  return (\r\n    <Card>\r\n      <Link to=\"/Applications\">\r\n        <Box textAlign=\"right\">\r\n          <Typography color=\"textSecondary\">Applications</Typography>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {applicationCount}\r\n          </Typography>\r\n        </Box>\r\n      </Link>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useDataProvider } from \"react-admin\";\r\n\r\nexport default () => {\r\n  const [applicationCount, setApplicationCount] = useState(0);\r\n  const dataProvider = useDataProvider();\r\n\r\n  useEffect(() => {\r\n    const fetchAppList = async () => {\r\n      const { total } = await dataProvider.getList(\"Applications\");\r\n      setApplicationCount(total);\r\n    };\r\n    fetchAppList();\r\n  }, [applicationCount, dataProvider]);\r\n\r\n  return [applicationCount];\r\n};\r\n","import React from \"react\";\r\nimport { Box, Card, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useOrganizationProvider from \"../../hooks/useOrganizationProvider\";\r\n\r\nconst Organizations = (props) => {\r\n  const [organizationCount] = useOrganizationProvider();\r\n  return (\r\n    <Card>\r\n      <Link to=\"/Organizations\">\r\n        <Box textAlign=\"right\">\r\n          <Typography color=\"textSecondary\">Organizations</Typography>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {organizationCount}\r\n          </Typography>\r\n        </Box>\r\n      </Link>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Organizations;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useDataProvider } from \"react-admin\";\r\n\r\nexport default () => {\r\n  const [organizationCount, setOrganizationCount] = useState(0);\r\n  const dataProvider = useDataProvider();\r\n\r\n  useEffect(() => {\r\n    const fetchOrgList = async () => {\r\n      const { total } = await dataProvider.getList(\"Organizations\");\r\n      setOrganizationCount(total);\r\n    };\r\n    fetchOrgList();\r\n  }, [organizationCount, dataProvider]);\r\n\r\n  return [organizationCount];\r\n};\r\n","import React from \"react\";\r\nimport { Card, CardHeader } from \"@material-ui/core\";\r\nimport Admins from \"./Admins\";\r\nimport Applications from \"./Applications\";\r\nimport Organizations from \"./Organizations\";\r\n\r\nconst Dashboard = () => (\r\n  <Card>\r\n    <CardHeader title=\"Welcome to Admin Dashboard\" />\r\n    <Admins />\r\n    <Applications />\r\n    <Organizations />\r\n  </Card>\r\n);\r\n\r\nexport default Dashboard;\r\n","const loginUrl =\r\n  \"https://comments-microservice.herokuapp.com/v1/msadmins/login\";\r\n\r\nexport default {\r\n  login: async ({ username, password }) => {\r\n    const request = new Request(loginUrl, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ email: username, password }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    return fetch(request)\r\n      .then((res) => {\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error(res.statusText);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(({ data }) => {\r\n        localStorage.setItem(\"systemToken\", data.systemToken);\r\n      });\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem(\"systemToken\");\r\n    return Promise.resolve();\r\n  },\r\n  checkError: (error) => {\r\n    if (error && (error.status === 401 || error.status === 403)) {\r\n      localStorage.removeItem(\"systemToken\");\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  },\r\n  checkAuth: () => {\r\n    return localStorage.getItem(\"systemToken\")\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  },\r\n  getPermissions: () => Promise.resolve(),\r\n};\r\n","export default (data) => {\r\n  if (data.records && Array.isArray(data.records)) {\r\n    return data.records.map((item) => ({ id: item.msAdminId, ...item }));\r\n  } else if (data.msAdminId) {\r\n    return { id: data.msAdminId, ...data };\r\n  }\r\n  return data;\r\n};\r\n","import getData from \"../../utils/data/admin-data\";\r\nimport {\r\n  GET_LIST,\r\n  GET_ONE,\r\n  CREATE,\r\n  UPDATE,\r\n  DELETE,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n} from \"react-admin\";\r\n\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_LIST:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        getData: getData,\r\n      };\r\n    case GET_ONE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/${params.id}`,\r\n        getData: getData,\r\n      };\r\n    case GET_MANY:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        getData: getData,\r\n      };\r\n    case GET_MANY_REFERENCE:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        getData: getData,\r\n      };\r\n    case UPDATE:\r\n      return {\r\n        url: `${apiUrl}/msadmins`,\r\n        options: {\r\n          method: \"PATCH\",\r\n          body: JSON.stringify(params.data),\r\n        },\r\n        getData: getData,\r\n      };\r\n    case CREATE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/create`,\r\n        options: {\r\n          method: \"POST\",\r\n          body: JSON.stringify(params.data),\r\n        },\r\n        getData: getData,\r\n      };\r\n    case DELETE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/${params.id}`,\r\n        options: { method: \"DELETE\" },\r\n        getData: getData,\r\n      };\r\n    default:\r\n      throw new Error(`Unsupported Admin Data Provider request type ${type}`);\r\n  }\r\n};\r\n","const getOrganizationsData = (data, target, id) => {\r\n  let mappedData = data;\r\n\r\n  if (Array.isArray(data.records) && data.records[0].organizationId) {\r\n    mappedData = data.records.map(mapOrganizationIdToId);\r\n  }\r\n\r\n  if (target && id) {\r\n    mappedData = mappedData.filter((item) => item[target] === id);\r\n  }\r\n\r\n  return mappedData;\r\n};\r\n\r\nconst mapOrganizationIdToId = (organization) => {\r\n  return { id: organization.organizationId, ...organization };\r\n};\r\n\r\nexport default getOrganizationsData;\r\n","const getApplicationsData = (data, target, id) => {\r\n  let mappedData = data;\r\n\r\n  if (Array.isArray(data.records) && data.records[0].applicationId) {\r\n    mappedData = data.records.map(mapApplicationIdToId);\r\n\r\n    if (target && id) {\r\n      mappedData = mappedData.filter((item) => {\r\n        return item[target]._id === id;\r\n      });\r\n    }\r\n  }\r\n\r\n  return mappedData;\r\n};\r\n\r\nconst mapApplicationIdToId = (application) => {\r\n  if (application.organizationId) {\r\n    return {\r\n      id: application.applicationId,\r\n      orgId: application.organizationId._id,\r\n      ...application,\r\n    };\r\n  }\r\n  return {\r\n    id: application.applicationId,\r\n    ...application,\r\n  };\r\n};\r\n\r\nexport default getApplicationsData;\r\n","import getData from \"../../utils/data/application-data\";\r\nimport {\r\n  GET_ONE,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n} from \"react-admin\";\r\n\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_MANY:\r\n    case GET_LIST:\r\n      return {\r\n        url: `${apiUrl}/msadmins/applications`,\r\n        getData: getData,\r\n      };\r\n    case GET_MANY_REFERENCE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/applications`,\r\n        getData: (data) => {\r\n          return getData(data, params.target, params.id);\r\n        },\r\n      };\r\n    case GET_ONE:\r\n    case DELETE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/applications/${params.id}`,\r\n        getData: getData,\r\n      };\r\n    case DELETE_MANY:\r\n      return {\r\n        urls: params.ids.map((id) => `${apiUrl}/msadmins/applications/${id}`),\r\n        getData: getData,\r\n      };\r\n    default:\r\n      throw new Error(\r\n        `Unsupported Application Data Provider request type ${type}`\r\n      );\r\n  }\r\n};\r\n","import adminEndpoints from \"./admin-endpoints\";\r\nimport settingsEndpoints from \"./settings-endpoints\";\r\nimport organizationsEndpoints from \"./organizations-endpoints\";\r\nimport applicationEndpoints from \"./application-endpoints\";\r\n\r\nexport default (type, resource, params) => {\r\n  switch (resource) {\r\n    case \"Admins\":\r\n      return adminEndpoints(type, params);\r\n    case \"Settings\":\r\n      return settingsEndpoints(type, params);\r\n    case \"Organizations\":\r\n      return organizationsEndpoints(type, params);\r\n    case \"Applications\":\r\n      return applicationEndpoints(type, params);\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n","import { GET_ONE, UPDATE } from \"react-admin\";\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_ONE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/settings`,\r\n        getData: (data) => data,\r\n      };\r\n    case UPDATE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/settings`,\r\n        options: {\r\n          method: \"PATCH\",\r\n          body: JSON.stringify(params.data),\r\n        },\r\n        getData: (data) => data,\r\n      };\r\n    default:\r\n      throw new Error(`Unsupported Admin Data Provider request type ${type}`);\r\n  }\r\n};\r\n","import getData from \"../../utils/data/organizations-data\";\r\nimport {\r\n  GET_ONE,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  DELETE,\r\n} from \"react-admin\";\r\n\r\nconst apiUrl = \"https://comments-microservice.herokuapp.com/v1\";\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case GET_MANY:\r\n    case GET_LIST:\r\n      return {\r\n        url: `${apiUrl}/msadmins/organizations`,\r\n        getData: getData,\r\n      };\r\n    case GET_MANY_REFERENCE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/organizations`,\r\n        getData: (data) => {\r\n          return getData(data, params.target, params.id);\r\n        },\r\n      };\r\n    case GET_ONE:\r\n    case DELETE:\r\n      return {\r\n        url: `${apiUrl}/msadmins/organizations/${params.id}`,\r\n        getData: getData,\r\n      };\r\n    default:\r\n      throw new Error(\r\n        `Unsupported Application Data Provider request type ${type}`\r\n      );\r\n  }\r\n};\r\n","import { fetchUtils } from \"react-admin\";\r\nimport endpoints from \"../utils/endpoints\";\r\nimport { stringify } from \"querystring\";\r\nimport getPaginateQuery from \"../utils/pagination\";\r\nimport {\r\n  GET_LIST,\r\n  GET_ONE,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  CREATE,\r\n  UPDATE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n} from \"react-admin\";\r\n\r\nconst httpClient = (url, options = {}) => {\r\n  if (!options.headers) {\r\n    options.headers = new Headers({ Accept: \"application/json\" });\r\n  }\r\n  const systemToken = localStorage.getItem(\"systemToken\");\r\n  options.headers.set(\"Authorization\", `Bearer ${systemToken}`);\r\n  return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nexport default {\r\n  getList: (resource, params) => {\r\n    const query = getPaginateQuery(params);\r\n    const endpoint = endpoints(GET_LIST, resource, params);\r\n    return httpClient(`${endpoint.url}?${stringify(query)}`).then(\r\n      ({ json }) => ({\r\n        data: endpoint.getData(json.data),\r\n        total: json.data.pageInfo.totalRecord,\r\n      })\r\n    );\r\n  },\r\n\r\n  getOne: (resource, params) => {\r\n    const endpoint = endpoints(GET_ONE, resource, params);\r\n    return httpClient(endpoint.url).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  getMany: (resource, params) => {\r\n    const endpoint = endpoints(GET_MANY, resource, params);\r\n    return httpClient(endpoint.url).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  getManyReference: (resource, params) => {\r\n    const endpoint = endpoints(GET_MANY_REFERENCE, resource, params);\r\n    return httpClient(endpoint.url).then(({ json }) => ({\r\n      data: endpoint.getData(json.data, endpoint.target, endpoint.targetId),\r\n      total: json.data.pageInfo.totalRecord,\r\n    }));\r\n  },\r\n\r\n  update: (resource, params) => {\r\n    const token = localStorage.getItem(\"systemToken\");\r\n    const endpoint = endpoints(UPDATE, resource, params);\r\n    if (token === params.id || token === params.msAdminId) {\r\n      return httpClient(endpoint.url, endpoint.options).then(({ json }) => ({\r\n        data: endpoint.getData(json.data),\r\n      }));\r\n    }\r\n    return Promise.reject();\r\n  },\r\n\r\n  updateMany: (resource, params) => Promise.reject(),\r\n\r\n  create: (resource, params) => {\r\n    const endpoint = endpoints(CREATE, resource, params);\r\n    return httpClient(endpoint.url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(params.data),\r\n    }).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  delete: (resource, params) => {\r\n    const endpoint = endpoints(DELETE, resource, params);\r\n    httpClient(endpoint.url, {\r\n      method: \"DELETE\",\r\n    }).then(({ json }) => ({\r\n      data: endpoint.getData(json.data),\r\n    }));\r\n  },\r\n\r\n  deleteMany: (resource, params) => {\r\n    const endpoint = endpoints(DELETE_MANY, resource, params);\r\n    let result = [];\r\n    return Promise.all(\r\n      endpoint.urls.map((url) =>\r\n        httpClient(url, {\r\n          method: \"DELETE\",\r\n        }).then(({ json }) => result.push(endpoint.getData(json.data)))\r\n      )\r\n    ).then(() => ({ data: result }));\r\n  },\r\n};\r\n","import authProvider from \"./auth-provider\";\r\nimport dataProvider from \"./data-provider\";\r\n\r\nexport default {\r\n  authProvider: authProvider,\r\n  dataProvider: dataProvider,\r\n};\r\n","export default (params) => {\r\n  const { page, perPage } =\r\n    params && params.pagination ? params.pagination : { page: 1, perPage: 10 };\r\n  const { order } = params && params.sort ? params.sort : { order: \"DESC\" };\r\n  return {\r\n    limit: perPage,\r\n    sort: order,\r\n    page: page,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { List, Datagrid, TextField, EmailField, SimpleList } from \"react-admin\";\r\n\r\nconst AdminList = (props) => {\r\n  const isSmall = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <List label=\"Admins\" title=\"Admins\" {...props}>\r\n      {isSmall ? (\r\n        <SimpleList\r\n          linkType=\"show\"\r\n          primaryText={(record) => record.fullname}\r\n          secondaryText={(record) => record.email}\r\n          tertiaryText={(record) => record.role}\r\n        />\r\n      ) : (\r\n        <Datagrid rowClick=\"show\" isRowSelectable={(record) => false}>\r\n          <TextField label=\"Name\" source=\"fullname\" />\r\n          <TextField label=\"ID\" source=\"id\" />\r\n          <EmailField source=\"email\" />\r\n          <TextField source=\"role\" />\r\n        </Datagrid>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default AdminList;\r\n","import React from \"react\";\r\nimport { Edit, SimpleForm, TextInput, SaveButton, Toolbar } from \"react-admin\";\r\n\r\nconst CustomToolbar = (props) => (\r\n  <Toolbar {...props}>\r\n    <SaveButton />\r\n  </Toolbar>\r\n);\r\n\r\nconst AdminEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm toolbar={<CustomToolbar />}>\r\n      <TextInput disabled source=\"id\" />\r\n      <TextInput label=\"Full Name\" source=\"fullname\" />\r\n      <TextInput disabled source=\"email\" />\r\n      <TextInput disabled source=\"role\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport default AdminEdit;\r\n","import React from \"react\";\r\nimport {\r\n  Create,\r\n  SimpleForm,\r\n  TextInput,\r\n  PasswordInput,\r\n  required,\r\n} from \"react-admin\";\r\nimport { parse } from \"querystring\";\r\n\r\nconst AdminCreate = (props) => {\r\n  const data = parse(props.location.search);\r\n  console.log(\"AdminCreate\", data);\r\n  return (\r\n    <Create label=\"Create\" title=\"Create an Admin\" {...props}>\r\n      <SimpleForm redirect=\"show\">\r\n        <TextInput\r\n          label=\"Full Name\"\r\n          source=\"fullname\"\r\n          validate={[required()]}\r\n        />\r\n        <TextInput source=\"email\" validate={[required()]} />\r\n        <PasswordInput source=\"password\" validate={[required()]} />\r\n      </SimpleForm>\r\n    </Create>\r\n  );\r\n};\r\n\r\nexport default AdminCreate;\r\n","import React from \"react\";\r\nimport {\r\n  Show,\r\n  SimpleShowLayout,\r\n  TextField,\r\n  TopToolbar,\r\n  DeleteButton,\r\n  EditButton,\r\n} from \"react-admin\";\r\n\r\nconst AdminShowActions = ({ basePath, data, resource }) => (\r\n  <TopToolbar>\r\n    <EditButton basePath={basePath} record={data} />\r\n    <DeleteButton basePath={basePath} record={data} resource={resource} />\r\n  </TopToolbar>\r\n);\r\n\r\nconst AdminShow = (props) => (\r\n  <Show label=\"Show\" title=\"\" actions={<AdminShowActions />} {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField label=\"Full Name\" source=\"fullname\" />\r\n      <TextField source=\"email\" />\r\n      <TextField source=\"password\" />\r\n      <TextField source=\"role\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n\r\nexport default AdminShow;\r\n","import AdminList from \"./AdminList\";\r\nimport AdminEdit from \"./AdminEdit\";\r\nimport AdminCreate from \"./AdminCreate\";\r\nimport AdminShow from \"./AdminShow\";\r\nimport UserIcon from \"@material-ui/icons/Group\";\r\n\r\nexport default {\r\n  list: AdminList,\r\n  edit: AdminEdit,\r\n  create: AdminCreate,\r\n  show: AdminShow,\r\n  icon: UserIcon,\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { List, Datagrid, TextField, SimpleList, Pagination } from \"react-admin\";\r\n\r\nconst OrganizationPagination = (props) => (\r\n  <Pagination rowsPerPageOptions={[10, 25, 50]} {...props} />\r\n);\r\n\r\nconst OrganizationList = (props) => {\r\n  const isSmall = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <List\r\n      label=\"Organizations\"\r\n      title=\"Organizations\"\r\n      pagination={<OrganizationPagination />}\r\n      {...props}\r\n    >\r\n      {isSmall ? (\r\n        <SimpleList\r\n          linkType=\"show\"\r\n          primaryText={(record) => record.organizationName}\r\n          secondaryText={(record) => `${record.organizationId}`}\r\n        />\r\n      ) : (\r\n        <Datagrid rowClick=\"show\">\r\n          <TextField label=\"Name\" source=\"organizationName\" />\r\n          <TextField label=\"ID\" source=\"id\" />\r\n        </Datagrid>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default OrganizationList;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Show,\r\n  TabbedShowLayout,\r\n  Tab,\r\n  TextField,\r\n  ReferenceManyField,\r\n  SimpleList,\r\n  TopToolbar,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    color: \"#3f51b5\",\r\n  },\r\n});\r\n\r\nconst OrganizationShowActions = ({ basePath, data, resource }) => (\r\n  <TopToolbar>\r\n    <DeleteButton basePath={basePath} record={data} resource={resource} />\r\n  </TopToolbar>\r\n);\r\n\r\nconst OrganizationShow = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Show label=\"Show\" actions={<OrganizationShowActions />} {...props}>\r\n      <TabbedShowLayout>\r\n        <Tab label=\"details\">\r\n          <TextField label=\"ID\" source=\"organizationId\" />\r\n          <TextField source=\"organizationName\" />\r\n        </Tab>\r\n        <Tab label=\"applications\">\r\n          <ReferenceManyField\r\n            link=\"show\"\r\n            label=\"\"\r\n            reference=\"Applications\"\r\n            target=\"organizationId\"\r\n          >\r\n            <SimpleList\r\n              className={classes.root}\r\n              linkType=\"show\"\r\n              primaryText={(record) => record.applicationName}\r\n            ></SimpleList>\r\n          </ReferenceManyField>\r\n        </Tab>\r\n      </TabbedShowLayout>\r\n    </Show>\r\n  );\r\n};\r\n\r\nexport default OrganizationShow;\r\n","import OrganizationList from \"./OrganizationList\";\r\nimport OrganizationShow from \"./OrganizationShow\";\r\nimport OrganizationIcon from \"@material-ui/icons/Business\";\r\n\r\nexport default {\r\n  list: OrganizationList,\r\n  show: OrganizationShow,\r\n  icon: OrganizationIcon,\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  SimpleList,\r\n  Pagination,\r\n  ReferenceField,\r\n} from \"react-admin\";\r\n\r\nconst ApplicationPagination = (props) => (\r\n  <Pagination rowsPerPageOptions={[10, 25, 50]} {...props} />\r\n);\r\n\r\nconst ApplicationList = (props) => {\r\n  const isSmall = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <List\r\n      label=\"Applications\"\r\n      title=\"Applications\"\r\n      pagination={<ApplicationPagination />}\r\n      {...props}\r\n    >\r\n      {isSmall ? (\r\n        <SimpleList\r\n          linkType=\"show\"\r\n          primaryText={(record) => record.applicationName}\r\n          secondaryText={(record) => record.orgId}\r\n          tertiaryText={(record) => record.organizationName}\r\n        />\r\n      ) : (\r\n        <Datagrid rowClick=\"show\">\r\n          <TextField label=\"Name\" source=\"applicationName\" />\r\n          <TextField label=\"ID\" source=\"id\" />\r\n          <ReferenceField\r\n            link=\"show\"\r\n            label=\"Organization\"\r\n            source=\"orgId\"\r\n            reference=\"Organizations\"\r\n          >\r\n            <TextField label=\"Organization Name\" source=\"organizationName\" />\r\n          </ReferenceField>\r\n        </Datagrid>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ApplicationList;\r\n","import React from \"react\";\r\nimport {\r\n  Show,\r\n  SimpleShowLayout,\r\n  TextField,\r\n  ReferenceField,\r\n  TopToolbar,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nconst ApplicationShowActions = ({ basePath, data, resource }) => (\r\n  <TopToolbar>\r\n    <DeleteButton basePath={basePath} record={data} resource={resource} />\r\n  </TopToolbar>\r\n);\r\n\r\nconst ApplicationShow = (props) => (\r\n  <Show label=\"Show\" title=\"\" actions={<ApplicationShowActions />} {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField source=\"id\" />\r\n      <TextField label=\"Name\" source=\"applicationName\" />\r\n      <TextField label=\"Organization ID\" source=\"orgId\" />\r\n      <ReferenceField\r\n        link=\"show\"\r\n        label=\"Organization\"\r\n        source=\"orgId\"\r\n        reference=\"Organizations\"\r\n      >\r\n        <TextField source=\"organizationName\" />\r\n      </ReferenceField>\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n\r\nexport default ApplicationShow;\r\n","import ApplicationList from \"./ApplicationList\";\r\nimport ApplicationShow from \"./ApplicationShow\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\n\r\nexport default {\r\n  list: ApplicationList,\r\n  show: ApplicationShow,\r\n  icon: AppsIcon,\r\n};\r\n","import React from \"react\";\r\nimport { Show, SimpleShowLayout, TextField } from \"react-admin\";\r\n\r\nconst SettingShow = (props) => (\r\n  <Show label=\"Settings\" title=\"Settings\" {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField label=\"Requests per Minute (max)\" source=\"maxRequestsPerMin\" />\r\n      <TextField label=\"Items per Page (default)\" source=\"maxItemsPerPage\" />\r\n      <TextField label=\"Items per Page (max)\" source=\"defaultItemsPerPage\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n\r\nexport default SettingShow;\r\n","import SettingShow from \"./SettingShow\";\r\nimport SettingIcon from \"@material-ui/icons/Settings\";\r\n\r\nexport default {\r\n  list: SettingShow,\r\n  show: SettingShow,\r\n  icon: SettingIcon,\r\n};\r\n","import React from \"react\";\r\nimport { Admin, Resource } from \"react-admin\";\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport services from \"./services\";\r\nimport msadmins from \"./components/msadmins\";\r\nimport organizations from \"./components/organizations\";\r\nimport applications from \"./components/applications\";\r\nimport settings from \"./components/settings\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Admin dashboard={Dashboard} {...services}>\r\n      <Resource name=\"Admins\" {...msadmins} />\r\n      <Resource name=\"Organizations\" {...organizations} />\r\n      <Resource name=\"Applications\" {...applications} />\r\n      <Resource name=\"Settings\" {...settings} />\r\n    </Admin>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}